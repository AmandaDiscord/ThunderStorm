import MessagePayload from "./MessagePayload";
import Base from "./Base";
import MessageAttachment from "./MessageAttachment";
import MessageComponentInteractionCollector from "./MessageComponentInteractionCollector";
import ReactionCollector from "./ReactionCollector";
import Sticker from "./Sticker";
import { Collection } from "@discordjs/collection";
import MessageFlags from "../util/MessageFlags";
declare class Message extends Base {
    partial: false;
    channel: import("./interfaces/TextBasedChannel");
    deleted: boolean;
    type: import("../Types").MessageType | null;
    system: boolean | null;
    content: string | null;
    author: import("./User") | null;
    pinned: boolean | null;
    tts: boolean | null;
    nonce: string | null;
    embeds: Array<import("./MessageEmbed")>;
    components: Array<import("./MessageActionRow")>;
    attachments: Collection<string, MessageAttachment>;
    stickers: Collection<string, Sticker>;
    createdTimestamp: number;
    editedTimestamp: number | null;
    reactions: Collection<string, import("./MessageReaction")>;
    mentions: import("./MessageMentions");
    webhookId: string | null;
    groupActivityApplication: import("./ClientApplication") | null;
    applicationId: string | null;
    activity: import("../Types").MessageActivity | null;
    member: import("./GuildMember");
    flags: Readonly<MessageFlags>;
    reference: import("../Types").MessageReference | null;
    interaction: import("../Types").MessageInteraction | null;
    static readonly default: typeof Message;
    constructor(client: import("../client/Client"), data: import("discord-typings").MessageData, channel: import("./interfaces/TextBasedChannel"));
    _patch(data: import("discord-typings").MessageData): void;
    patch(data: import("discord-typings").MessageData): this;
    get createdAt(): Date;
    get editedAt(): Date | null;
    get guild(): import("./Partial/PartialGuild") | null;
    get url(): string;
    get cleanContent(): string | null;
    createReactionCollector(filter: import("../Types").CollectorFilter<import("./MessageReaction")>, options?: import("../Types").ReactionCollectorOptions): ReactionCollector;
    awaitReactions(filter: import("../Types").CollectorFilter<import("./MessageReaction")>, options?: import("../Types").AwaitReactionsOptions): Promise<Collection<string, import("./MessageReaction")>>;
    createMessageComponentInteractionCollector(filter: import("../Types").CollectorFilter<import("./MessageComponentInteraction")>, options?: import("../Types").MessageComponentInteractionCollectorOptions): MessageComponentInteractionCollector;
    awaitMessageComponentInteraction(filter: import("../Types").CollectorFilter<import("./MessageComponentInteraction")>, time?: number): Promise<import("./MessageComponentInteraction")>;
    get editable(): boolean;
    get deletable(): boolean;
    get pinnable(): boolean;
    fetchReference(): Promise<Message>;
    get crosspostable(): boolean | null;
    edit(options: string | import("../Types").MessageEditOptions): Promise<void>;
    crosspost(): Promise<this>;
    pin(): Promise<this>;
    unpin(): Promise<this>;
    react(emoji: import("../Types").EmojiIdentifierResolvable): Promise<this>;
    clearReactions(): Promise<this>;
    delete(): Promise<this>;
    reply(options?: string | MessagePayload | import("../Types").ReplyMessageOptions): Promise<Message>;
    fetch(): Promise<this>;
    fetchWebhook(): Promise<import("./Webhook")>;
    suppressEmbeds(suppress?: boolean): Promise<void>;
    removeAttachments(): Promise<void>;
    equals(message: Message, rawData: import("discord-typings").MessageData): boolean;
    toString(): string | null;
    toJSON(): any;
}
export = Message;
